{"version":3,"sources":["games/snake/Snake.js","games/snake/index.js","App.js","serviceWorker.js","index.js"],"names":["getNewFruit","maxX","maxY","snake","getRandomFruitPosRecursive","remainingAttempts","Error","fruitPos","X","getRandomInt","Y","getRadomPos","contains","samePos","a","b","p","ps","comp","some","pp","max","Math","floor","random","getClassNameByValue","value","getInitialState","gameState","initialSnakeState","getInitialSnakeState","speed","transform","dX","dY","fruit","score","Snake","props","SETUP","RUNNING","GAMEOVER","height","width","board","result","i","id","values","j","createBoard","useState","state","setState","forEach","boardUI","map","row","cols","col","key","className","moveForward","nextSnakeHead","nextY","nextX","getNextSnakeHead","outOfBounds","pos","isOutOfBounds","snakeCollision","nextSnakeBody","pop","isSnakeEatingItSelf","nextGameState","nextSnake","nextScore","nextFruit","unshift","isSnakeEatingFruit","tipOfTail","length","push","enlargeSnake","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useInterval","info","align","onClick","evt","onKeyDown","event","console","log","tabIndex","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.438c4669.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\n\n\nfunction Snake(props) {\n    let SETUP = 0;\n    let RUNNING = 1;\n    let GAMEOVER = 2;\n    let height = props.height;\n    let width = props.width;\n    let board = createBoard(height, width);\n    const [state, setState] = useState(getInitialState(SETUP, width, height))\n\n    board[state.fruit.Y].values[state.fruit.X].value = 2;\n    state.snake.forEach(p => board[p.Y].values[p.X].value = 1);\n\n    let boardUI = board.map(row => {\n        let cols = row.values.map(col => {\n            return <td key={col.id} className={getClassNameByValue(col.value)}>&nbsp;</td>\n        });\n        return (\n            <tr key={row.id}>\n                {cols}\n            </tr>\n        )\n    })\n\n    function moveForward() {\n        let {snake, gameState, transform, score, fruit} = state;\n        let nextSnakeHead = getNextSnakeHead(state.snake, transform);\n        let outOfBounds = isOutOfBounds(nextSnakeHead, width, height);\n        let snakeCollision = isSnakeEatingItSelf(nextSnakeHead, state.snake);\n        let nextGameState = outOfBounds || snakeCollision ? GAMEOVER : gameState;\n\n        var nextSnake = [...snake];\n        var nextScore = score;\n        var nextFruit = fruit;\n\n        if (nextGameState === RUNNING) {\n            nextSnake.unshift(nextSnakeHead);\n            nextSnake.pop();\n\n            if (isSnakeEatingFruit(nextSnakeHead, state.fruit)) {\n                nextScore += 1;\n                nextSnake = enlargeSnake(nextSnake);\n                nextFruit = getNewFruit(width, height, nextSnake)\n            }\n        }\n\n        setState({...state,\n            snake:nextSnake,\n            gameState:nextGameState,\n            score: nextScore,\n            fruit: nextFruit\n        });\n    }\n\n    function handleKeyEvent(event) {\n        var key = event.key || \"\";\n        if (state.gameState === RUNNING) {\n            if (key === \"ArrowUp\") {\n                setState({...state, speed: state.speed - 100});\n            } else if (key === \"ArrowDown\") {\n                setState({...state, speed: state.speed + 100});\n            } else if (key === \"ArrowLeft\") {\n                setState({...state, transform:{dY: state.transform.dX * (-1), dX: state.transform.dY}})\n            } else if (key === \"ArrowRight\") {\n                setState({...state, transform:{dY: state.transform.dX, dX: state.transform.dY * (-1)}})\n            } else if (key === \"a\") {\n                setState({...state, transform:{dY: 0, dX: -1}})\n            } else if (key === \"w\") {\n                setState({...state, transform:{dY: -1, dX: 0}})\n            } else if (key === \"d\") {\n                setState({...state, transform:{dY: 0, dX: 1}})\n            } else if (key === \"s\") {\n                setState({...state, transform:{dY: 1, dX: 0}})\n            } else {\n                console.log(\"MOVE - \" + event.key);\n            }\n        }\n    }\n\n    function handleOnClick(evt) {\n        if (state.gameState === SETUP) {\n            setState({...state, gameState:RUNNING});\n        } else if (state.gameState === RUNNING) {\n            setState({...state, gameState:GAMEOVER});\n        } else if (state.gameState === GAMEOVER) {\n            setState(getInitialState(SETUP, width, height))\n        }\n    }\n    useInterval(() => {if (state.gameState === RUNNING) moveForward()}, state.speed);\n\n    var info = (() => {\n        if (state.gameState === SETUP) {\n            return(\n                <p>\n                    Click to start\n                </p>);\n        } else if (state.gameState === RUNNING) {\n            return(\n                <p>\n                    Use <b>LEFT</b> or <b>RIGHT</b> to turn the snakes head<br/>\n                    or <b>a, w, d, s</b> to go West, North, East or South\n                </p>);\n        } else if (state.gameState === GAMEOVER) {\n            return(\n                <div>\n                    <h3>Game Over!</h3>\n                    <p>\n                        Click to restart\n                    </p>\n                </div>);\n        }\n    })();\n\n    return (\n        <div className={\"snake\"} align={'center'} onClick={handleOnClick} onKeyDown={handleKeyEvent} tabIndex={0}>\n            <h1>Welcome to Snake.js</h1>\n            {info}\n            <h2>Score:{state.score}</h2>\n            <table className={\"board\"}>\n                <tbody>{boardUI}</tbody>\n            </table>\n        </div>\n    )\n}\n\nfunction isSnakeEatingItSelf(nextSnakeHead, snake) {\n    let nextSnakeBody = [...snake];\n    nextSnakeBody.pop();\n    return contains(nextSnakeHead, nextSnakeBody, samePos);\n}\n\nfunction isSnakeEatingFruit(nextSnakeHead, fruit) {\n    return samePos(nextSnakeHead, fruit);\n}\n\nfunction enlargeSnake(snake) {\n    let tipOfTail = snake[snake.length-1];\n    let nextSnake = [...snake];\n    for(var i = 0; i < 5; i++){\n        nextSnake.push(tipOfTail);\n    }\n    return nextSnake;\n}\n\nfunction getNextSnakeHead(snake, transform) {\n    let nextY = snake[0].Y + transform.dY;\n    let nextX = snake[0].X + transform.dX;\n    return {Y:nextY, X:nextX};\n}\n\nfunction isOutOfBounds(pos, width, height) {\n    return pos.Y < 0 || pos.Y >= height || pos.X < 0 || pos.X >= width;\n}\n\nfunction getNewFruit(maxX, maxY, snake) {\n    function getRandomFruitPosRecursive(maxX,   maxY, snake, remainingAttempts) {\n        if (remainingAttempts === 0) {\n            throw new Error(\"Exhusted attempts to find fruit position\");\n        }\n        var fruitPos = getRadomPos(maxX, maxY);\n        if (!contains(fruitPos, snake, samePos)) {\n            return fruitPos;\n        }\n        return getRandomFruitPosRecursive(maxX, maxY, snake, --remainingAttempts);\n    }\n    return getRandomFruitPosRecursive(maxX, maxY, snake, 100);\n\n\n}\n\nfunction samePos(a, b) {\n    return a.X === b.X && a.Y === b.Y;\n}\nfunction contains(p, ps, comp) {\n    return ps.some(pp => {\n        return comp(p,pp);\n    })\n}\nfunction getRadomPos(maxX, maxY){\n    return {X:getRandomInt(maxX), Y:getRandomInt(maxY)};\n}\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\nfunction getClassNameByValue(value) {\n    switch (value) {\n        case 1:\n            return \"occupied\";\n        case 2:\n            return \"apple\";\n        default:\n            return \"empty\";\n    }\n}\n\nfunction createBoard(height, width) {\n    var result = [];\n    for (var i = 0 ; i < height; i++) {\n        result[i] = {id:i, values:[]};\n        for (var j = 0; j < width; j++) {\n            result[i].values[j] = {id:i+\":\"+j, value:0};\n        }\n    }\n    return result;\n}\nfunction getInitialSnakeState(maxX, maxY) {\n    return [\n        {X: maxX / 2, Y: maxY / 2},\n        {X: maxX / 2, Y: maxY / 2},\n        {X: maxX / 2, Y: maxY / 2},\n        {X: maxX / 2, Y: maxY / 2}\n    ];\n}\n\nfunction getInitialState(gameState, maxX, maxY) {\n    let initialSnakeState = getInitialSnakeState(maxX, maxY);\n    return {\n        gameState: gameState,\n        speed: getInitialSpeed(),\n        transform: getInitialTransformer(),\n        snake: initialSnakeState,\n        fruit: getNewFruit(maxX, maxY, initialSnakeState),\n        score:0,\n\n    };\n}\n\nfunction getInitialTransformer() {\n    return {dX: 0, dY: -1};\n}\nfunction getInitialSpeed() {\n    return 300;\n}\n\nfunction useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\nexport default Snake;\n","import Snake from './Snake'\nexport default Snake\n","import React from 'react';\nimport {Snake} from './games'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Snake width={20} height={20}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}